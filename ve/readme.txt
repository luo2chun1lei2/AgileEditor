环境要求：
1，需要安装Python 2.6，用于Python语言。
2，需要安装PyGObject，用于使用Gnome控件（适用于Gnome 3.0）。
3，eclipse 4.4（Java开发环境），再安装PyDev。
4，需要安装id-utils，这部分实际上没有仔细的运行。
5, sudo apt-get install python-bzrlib

参考：
1, Python GI API Reference:
    http://lazka.github.io/pgi-docs/
2, 本机代码参考：
    /usr/lib/python2.7/dist-packages/gi

3, gtk source view的语言分析
/usr/share/gtksourceview-2.0/language-specs

4，修改global的配置文件，加入需要避免的路径。
cp ./doc/global/examples/gtags.conf etc/
在common::skip中加入obj/

总的要求：
1，集成开发环境。选择使用python开发自己的程序，利用pyGObject来实现大部分的缺省功能。
	需要GTK+3，Python2/3，以及gobject-introspection
	1，编辑环境。
	2，代码分析和浏览功能。
	3，编译。
	4，测试。
	5，调试。
2，工程管理。
	1，工程生成。
	2，工程动作。
	3，工程依赖性。
3，项目管理功能。
	1，资源管理。
	2，任务安排。
	3，信息发布和收集。
	
软件设计要求：
1，模块之间解耦合，容易进行组合和功能的调用。
2，画面具有更加灵活的组合方式，而且开发速度需要快。
3，可以自定义自己的流程。

分阶段实现
	第一阶段：高级编辑器
		0, 命令
			+ 指定打开某个文件
			+ 指定打开某个项目
		1，单文件编辑器
		    + 设置字体（Ubuntu mono）
		    + 光标所在行变色。
			+ 根据文件后缀，设定不同的文件类型。 
			- 以后可以通过内容来判断文件类型（https://github.com/ahupp/python-magic#readme）
			+ 加入程序关于，和版本号。
			+ 文件编辑
			- 复制/粘贴(快捷键)
			- 查找/替换
			- 多文件查找
			- 文件中的代码导航
			+ 单词自动提示。
		2, 多文件列表
			- 文件Tab页。
		3, 状态栏。
			- 加入
			- 覆盖还是插入
			- 当前的行号和总行数
			- 文件的绝对路径
			- 文件的码
		4，分析代码。
			- 长时间工作的进度条。
			+ 生成Tag文件。
			+ 加入右边的Tags列表。文件的Tag列表。
			- Tag是在哪里被引用的。
				- 查询
				- 编辑器跳转。
			- Tag在那里定义。
				- 查询
				- 编辑器跳转。
		5, 支持项目管理。
			+ 可以加入、
			- 删除、
			+ 打开项目。
			- 可以直接在命令行中打开项目。
			+ 显示项目的文件。
				- 文件的信息。
			- 项目内的文件检索和替换。
		6, Git管理。
			- 查看当前项目的Git的修改情况。
			- 可以提交代码。
			- 可以更新代码。
		7, 定制gtags和global，表现更多的信息。
		8, ctags具有更多的类型信息，可以加入帮助，但是速度太慢了。
		9, 检索的结果放入到一个固定的列表控件中，可以随时再使用。
		10，检索等，可以边输入，边看到结果。

	第二阶段：和当前项目结合的编辑器
		1，可以建立项目的编辑器。
		2, 编译命令
			- 编译结果反映到代码中
		3, 调试
			- 可以进行调试

	第三个阶段：和项目管理结合在一起的编辑器
		1，可以和项目管理联合的程序。
			- 指定目标进行编译。

	第四个阶段：可以高度定制化的编辑器。
		1, 定制画面的布局
			- 可以随意定义不同的窗口，放在任何屏幕上。
			- 每个窗口可以随意定义内部的显示内容。
		2, 整体做成MVC模型。
			- 内部使用一个统一的数据模型，所有的View都依赖于这个模型。
			- 可以加入自己的插件。

#-p emu_its --file /home/luocl/workshop/src/emu/teei_its/its_base/lib/its_base.cc

当前的问题：
1，快速关闭文件，容易崩溃，应该是使用了失效的iter。
2，打开程序后，第一次编辑文件后保存，马上移动光标，容易崩溃。
3，画面提供控制台，随时可以输入命令。
5，检索时，可以立刻见到临时结果。
6，检索后列表最好是非模式的。
7，启动速度慢时，尤其是每天第一次启动时，会在任务条中出现两个图标，影响以后的任务切换。
8，左侧的文件列表，不支持文件添加、修改名字、删除以及属性查询。
	当左边打开的文件夹是空的时候，文件树显示不正常。
9，加入mark功能，有利于开发。
10，关闭所有文件时，右边还有TAG列表残留。
11，TAG的查询，是否可以加入IDutil，丰富文件内和函数内的代码分析。
12，对于TAG的查询，是否可以不用启动命令，而是global一旦启动后，一直使用。
13，Global查询最好是异步的，提供进度条。
14，项目可以修改名字。
16，每次切换文件的时候，之前的检索项目就无效了，而且再检索的时候，如果检索内容和之前相同，就不再检查。
	应该每个文件都有自己的检索项目。
